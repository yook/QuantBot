name: CI - build installers

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
    branches:
      - master

jobs:
  build-mac:
    runs-on: macos-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Build (mac dmg)
        # do not publish from CI so we can inspect artifacts first
        run: npm run build -- --publish never
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Set up PAT for release
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Upload mac artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-installers
          path: release/**/QuantBot-Mac-*.dmg*

      # - name: Get package version
      #   id: get_version
      #   shell: bash
      #   run: |
      #     version=$(node -p "require('./package.json').version")
      #     echo "version=$version" >> $GITHUB_OUTPUT

      # - name: Create GitHub Release and attach artifacts
      #   if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
      #   uses: ncipollo/release-action@v1
      #   with:
      #     # Use PAT so the action can create/update releases
      #     token: ${{ secrets.GH_PAT }}
      #     tag: v${{ steps.get_version.outputs.version }}
      #     # Attach both uploaded artifact bundles (windows and mac)
      #     artifacts: mac-installers
      #     # Note: allowUpdates removed to avoid updating existing releases in production

  # build-windows-portable:
  #   runs-on: windows-latest
  #   env:
  #     GH_TOKEN: ${{ secrets.GH_PAT }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "22.x"
  #         cache: "npm"

  #     - name: Install deps
  #       run: npm ci

  #     - name: Build (windows portable)
  #       run: npm run build:win:portable:cross -- --publish never
  #       env:
  #         GH_TOKEN: ${{ secrets.GH_PAT }}

  #     - name: Validate native sqlite binary
  #       shell: pwsh
  #       run: |
  #         Write-Host "Looking for vscode-sqlite3.node inside release/**/win-unpacked..."
  #         $nodeFile = Get-ChildItem -Path release -Recurse -Filter "vscode-sqlite3.node" -ErrorAction SilentlyContinue | Select-Object -First 1
  #         if (-not $nodeFile) {
  #         Write-Error "vscode-sqlite3.node not found in release output"
  #         exit 1
  #         }
  #         Write-Host "Found: $($nodeFile.FullName)"
  #         $bytes = [System.IO.File]::ReadAllBytes($nodeFile.FullName)
  #         if ($bytes.Length -lt 64) { Write-Error "File too small to be valid PE"; exit 1 }
  #         if ($bytes[0] -ne 0x4D -or $bytes[1] -ne 0x5A) { Write-Error "Missing MZ header: not a PE file"; exit 1 }
  #         $e_lfanew = [System.BitConverter]::ToInt32($bytes,0x3c)
  #         if ($e_lfanew -le 0 -or $e_lfanew -ge $bytes.Length) { Write-Error "Invalid e_lfanew"; exit 1 }
  #         # Check PE signature bytes explicitly
  #         if ($bytes[$e_lfanew] -ne 0x50 -or $bytes[$e_lfanew + 1] -ne 0x45 -or $bytes[$e_lfanew + 2] -ne 0x00 -or $bytes[$e_lfanew + 3] -ne 0x00) {
  #         Write-Error "Missing PE signature bytes"
  #         exit 1
  #         }
  #         $machine = [System.BitConverter]::ToUInt16($bytes, $e_lfanew + 4)
  #         # IMAGE_FILE_MACHINE_AMD64 = 0x8664
  #         if ($machine -ne 0x8664) { Write-Error ("Native module is not x64 PE (machine=0x{0:X})" -f $machine); exit 1 }
  #         Write-Host ("Native module is valid Windows x64 PE (machine=0x{0:X})" -f $machine)

  #     - name: Upload windows artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: windows-installers
  #         path: |
  #           release/**/QuantBot-Windows-*-Setup.exe
  #           release/**/win-unpacked/**
      # - name: Get package version
      #   id: get_version
      #   shell: bash
      #   run: |
      #     version=$(node -p "require('./package.json').version")
      #     echo "version=$version" >> $GITHUB_OUTPUT

      # - name: Create GitHub Release and attach artifacts
      #   if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
      #   uses: ncipollo/release-action@v1
      #   with:
      #     # Use PAT so the action can create/update releases
      #     token: ${{ secrets.GH_PAT }}
      #     tag: v${{ steps.get_version.outputs.version }}
      #     # Attach both uploaded artifact bundles (windows and mac)
      #     artifacts: mac-installers
      #     # Note: allowUpdates removed to avoid updating existing releases in production