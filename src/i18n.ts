import { createI18n } from 'vue-i18n'

// Define your locale messages
const messages = {
  en: {
    common: {
      save: 'Save',
      name: 'Name',
      url: 'URL',
    },
    footer: {
      clearCache: 'Clear cache',
    },
    menu: {
      crawling: 'Crawling',
      keywords: 'Keywords',
      virtualTable: 'Virtual Table',
      settings: 'Settings',
    },
    header: {
      selectProject: 'Select project',
      noProjects: 'No projects found',
      addProjectButton: 'Add project',
    },
    addProject: {
      title: 'Add new project',
      namePlaceholder: 'site.com',
      urlPlaceholder: 'https://www.site.com',
      validations: {
        nameRequired: 'Project name is required',
        urlRequired: 'URL is required',
        urlInvalid: 'Enter a valid URL',
      },
    },
    settings: {
      title: 'Settings',
      general: 'General Settings',
      additional: 'Additional Settings',
      projectName: 'Project Name',
      deleteProject: 'Delete project',
      confirmDelete: 'Are you sure you want to delete this project? All project data will be permanently deleted.',
      confirmDeleteTitle: 'Confirm project deletion',
      confirmButton: 'Delete project',
      cancel: 'Cancel',
      inDevelopment: 'Settings in development',
    },
    parser: {
      name: 'Name',
      selector: 'Selector',
      find: 'Find',
      new: 'New',
    },
    crawler: {
      isNotURL: 'Invalid URL',
      start: 'Start',
      stop: 'Stop',
      continue: 'Continue',
      clear: 'Clear',
      configuration: 'Configuration',
      parser: 'Parser',
      tableSettingsTitle: 'Table settings',
      tableSettingsOff: 'Off',
      tableSettingsOn: 'On',
      tableSettingsConfirm: 'Confirm',
      deleteConfirmMessage: 'Are you sure you want to delete all crawler data? This action cannot be undone.',
      deleteConfirmTitle: 'Confirm crawler data deletion',
      deleteButton: 'Delete',
      cancelButton: 'Cancel',
      config: {
        depth: 'Depth',
        depthTooltip: 'Controls the max depth of resources that the crawler fetches. 0 means that the crawler won\'t restrict requests based on depth.',
        concurrency: 'Concurrency',
        concurrencyTooltip: 'Maximum request concurrency.',
        interval: 'Interval, ms',
        intervalTooltip: 'Determines the interval at which new requests are spawned by the crawler.',
        timeout: 'Timeout, ms',
        timeoutTooltip: 'Maximum time we\'ll wait for headers.',
        userAgent: 'User-Agent',
        respectRobotsTxt: 'Respect robots.txt',
        scanSubdomains: 'Scan subdomains',
        stripQueryString: 'Strip query string',
        stripQueryStringTooltip: 'Controls whether to strip query string parameters from URL\'s.',
        sortQueryParameters: 'Sort query parameters',
        parseScriptTags: 'Parse Script tags',
        scanImages: 'Scan images',
      },
    },
    keywords: {
      clear: 'Clear',
      configuration: 'Configuration',
      stopwords: 'Stop Words',
      classification: 'Classification',
      clustering: 'Clustering',
      categorization: 'Categorization',
      tableSettingsTitle: 'Table settings',
      tableSettingsOff: 'Off',
      tableSettingsOn: 'On',
      tableSettingsConfirm: 'Confirm',
      deleteConfirmMessage: 'Are you sure you want to delete all project keywords? This action cannot be undone.',
      deleteConfirmTitle: 'Confirm deletion',
      deleteButton: 'Delete',
      cancelButton: 'Cancel',
    },
    classification: {
      title: 'Query Classification by User Intent',
      goal: 'Goal',
      goalDescription: 'Classification of queries based on their characteristics and user intent.',
      descriptionTitle: 'Description',
      description: 'For each phrase, an embedding (vector representation) is computed using OpenAI Embeddings. Based on pre-labeled examples (phrases with known categories), a logistic regression model is trained to distinguish classes by embedding features. After training, a new phrase is also converted to an embedding and fed to the model, which returns the most probable category.',
      algorithmTitle: 'Algorithm',
      algorithmSteps: '• Compute embedding for each training phrase using OpenAI Embeddings.\n• Collect array of pairs: embedding — category (class label).\n• Train logistic regression model on these pairs.\n• For new phrase, obtain embedding.\n• Feed embedding to trained logistic regression model.\n• Model returns most probable category for this phrase.',
      saved: 'Saved',
      save_error: 'Save error',
      edit_placeholder: 'Edit phrases, press Enter to add',
      add_class: 'Add New Class',
      name_placeholder: 'Class name',
      description_placeholder: 'Add example phrases (comma or newline separated)',
      add_button: 'Add',
      delete_confirm: 'Delete class "{label}" and all its training examples?',
      delete_all_confirm: 'Delete all {count} training examples?',
      delete_all_confirm_message: 'Delete all training examples for the project?',
      delete_all_confirm_title: 'Confirm',
      empty_warning: 'No training examples to delete',
      both_required: 'Both class name and example phrases are required',
      select_project: 'Please select a project',
      phrase_too_long: 'Phrases longer than {max} characters were removed',
      duplicate_removed: 'Duplicate phrase removed: {phrase}',
    },
    delete: 'Delete',
    cancel: 'Cancel',
    stats: {
      status: 'Check Status',
      checked: 'Checked',
      queue: 'In Queue',
      ban: 'Forbidden',
      contentType: 'Content Type',
      code: 'HTTP Response Code',
      200: 'Successful 2XX',
      301: 'Redirects 3XX',
      error: 'Errors 4XX-5XX',
      depth: 'Nesting Level',
      '6more': '6 and more',
    },
  },
  ru: {
    common: {
      save: 'Сохранить',
      name: 'Название',
      url: 'URL',
    },
    footer: {
      clearCache: 'Очистить кэш',
    },
    menu: {
      crawling: 'Краулинг',
      keywords: 'Ключевые слова',
      virtualTable: 'Виртуальная таблица',
      settings: 'Настройки',
    },
    header: {
      selectProject: 'Выберите проект',
      noProjects: 'Проекты не найдены',
      addProjectButton: 'Новый проект',
    },
    addProject: {
      title: 'Добавить новый проект',
      namePlaceholder: 'site.com',
      urlPlaceholder: 'https://www.site.com',
      validations: {
        nameRequired: 'Имя проекта обязательно',
        urlRequired: 'URL обязателен',
        urlInvalid: 'Введите корректный URL',
      },
    },
    settings: {
      title: 'Настройки',
      general: 'Общие настройки',
      additional: 'Дополнительные настройки',
      projectName: 'Название проекта',
      deleteProject: 'Удалить проект',
      confirmDelete: 'Вы уверены, что хотите удалить этот проект? Все данные проекта будут безвозвратно удалены.',
      confirmDeleteTitle: 'Подтверждение удаления проекта',
      confirmButton: 'Удалить проект',
      cancel: 'Отмена',
      inDevelopment: 'Настройки в разработке',
    },
    parser: {
      name: 'Название',
      selector: 'Селектор',
      find: 'Найти',
      new: 'Новый',
    },
    crawler: {
      isNotURL: 'Некорректный URL',
      start: 'Старт',
      stop: 'Стоп',
      continue: 'Продолжить',
      clear: 'Очистить',
      configuration: 'Конфигурация',
      parser: 'Парсер',
      tableSettingsTitle: 'Настройки таблицы',
      tableSettingsOff: 'Выкл',
      tableSettingsOn: 'Вкл',
      tableSettingsConfirm: 'Готово',
      deleteConfirmMessage: 'Вы уверены, что хотите удалить все данные краулера? Это действие нельзя отменить.',
      deleteConfirmTitle: 'Подтверждение очистки данных краулера',
      deleteButton: 'Удалить',
      cancelButton: 'Отмена',
      config: {
        depth: 'Глубина',
        depthTooltip: 'Контролирует максимальную глубину ресурсов, которые загружает краулер. 0 означает, что краулер не будет ограничивать запросы по глубине.',
        concurrency: 'Параллельность',
        concurrencyTooltip: 'Максимальное количество одновременных запросов.',
        interval: 'Интервал, мс',
        intervalTooltip: 'Определяет интервал, с которым краулер создает новые запросы.',
        timeout: 'Тайм-аут, мс',
        timeoutTooltip: 'Максимальное время ожидания заголовков.',
        userAgent: 'User-Agent',
        respectRobotsTxt: 'Учитывать robots.txt',
        scanSubdomains: 'Сканировать поддомены',
        stripQueryString: 'Убирать параметры из адреса',
        stripQueryStringTooltip: 'Убирать ли параметры строки запроса из URL.',
        sortQueryParameters: 'Сортировать параметры запроса',
        parseScriptTags: 'Парсить Script теги',
        scanImages: 'Сканировать изображения',
      },
    },
    keywords: {
      clear: 'Очистить',
      configuration: 'Конфигурация',
      stopwords: 'Стоп-слова',
      classification: 'Классификация',
      clustering: 'Кластеризация',
      categorization: 'Категоризация',
      tableSettingsTitle: 'Настройки таблицы',
      tableSettingsOff: 'Выкл',
      tableSettingsOn: 'Вкл',
      tableSettingsConfirm: 'Готово',
      deleteConfirmMessage: 'Вы уверены, что хотите удалить все ключевые запросы проекта? Это действие нельзя отменить.',
      deleteConfirmTitle: 'Подтверждение удаления',
      deleteButton: 'Удалить',
      cancelButton: 'Отмена',
    },
    classification: {
      title: 'Классификация запросов по намерениям пользователей',
      goal: 'Цель',
      goalDescription: 'Классификация запросов на основе их характеристик и намерений пользователей.',
      descriptionTitle: 'Описание',
      description: 'Для каждой фразы вычисляется embedding (векторное представление) с помощью OpenAI Embeddings. На основе заранее размеченных примеров (фраз с известными категориями) обучается модель логистической регрессии, которая учится отличать классы по признакам embedding. После обучения новая фраза также преобразуется в embedding и подаётся на вход модели, которая возвращает наиболее вероятную категорию.',
      algorithmTitle: 'Алгоритм',
      algorithmSteps: '• Для каждой обучающей фразы вычислить embedding с помощью OpenAI Embeddings.\n• Собрать массив пар: embedding — категория (метка класса).\n• Обучить модель логистической регрессии на этих парах.\n• Для новой фразы получить embedding.\n• Подать embedding в обученную модель логистической регрессии.\n• Модель возвращает наиболее вероятную категорию для этой фразы.',
      saved: 'Сохранено',
      save_error: 'Ошибка сохранения',
      edit_placeholder: 'Редактировать фразы, Enter для добавления',
      add_class: 'Добавить новый класс',
      name_placeholder: 'Название класса',
      description_placeholder: 'Добавьте примеры фраз (через запятую или новую строку)',
      add_button: 'Добавить',
      delete_confirm: 'Удалить класс "{label}" и все его обучающие примеры?',
      delete_all_confirm: 'Удалить все {count} обучающих примеров?',
      delete_all_confirm_message: 'Удалить все обучающие примеры для проекта?',
      delete_all_confirm_title: 'Подтвердите',
      empty_warning: 'Нет обучающих примеров для удаления',
      both_required: 'Требуется указать название класса и примеры фраз',
      select_project: 'Пожалуйста, выберите проект',
      phrase_too_long: 'Фразы длиннее {max} символов были удалены',
      duplicate_removed: 'Дубликат удален: {phrase}',
    },
    delete: 'Удалить',
    cancel: 'Отмена',
    stats: {
      status: 'Статус проверки',
      checked: 'Проверено',
      queue: 'В очереди',
      ban: 'Запрещено',
      contentType: 'Тип контента',
      code: 'Код ответа HTTP',
      200: 'Успешные 2XX',
      301: 'Редиректы 3XX',
      error: 'Ошибки 4XX-5XX',
      depth: 'Уровень вложенности',
      '6more': '6 и больше',
    },
  },
}

export const i18n = createI18n({
  legacy: false,
  locale: 'ru',
  fallbackLocale: 'en',
  globalInjection: true,
  messages,
})

export type MessageSchema = typeof messages
